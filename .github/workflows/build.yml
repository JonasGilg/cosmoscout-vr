name: Build

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  clang_format:
    name: Check Clang-Format
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Download Clang-Format
        run: |
          sudo apt-get update -y
          sudo apt-get remove -y clang-6.0 libclang-common-6.0-dev libclang1-6.0 libllvm6.0
          sudo apt-get install -y clang-format
      - name: Run Clang-Format
        run: ./clang-format.sh
      - name: Compare Results
        run: |
          DIFF=$(git diff)
          if [ ! -z "$DIFF" ]; then echo $DIFF && exit 1; fi

  build_linux_gcc:
    name: Linux Build (gcc 7.4.0)
    runs-on: ubuntu-18.04
    if: >
      github.event_name == 'pull_request' ||
      ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      contains(github.event.head_commit.message, '[run-ci]')
    env:
      COSMOSCOUT_CODE_COVERAGE: true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Install CMake
        run: sudo pip install cmake
      - name: Download Dependencies
        run: |
          sudo add-apt-repository ppa:mhier/libboost-latest
          sudo apt-get update -q
          sudo apt-get install libc++-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev
          sudo apt-get install libxi-dev libgconf-2-4 libboost1.70-dev
          sudo apt-get install -y lcov
          sudo apt-get install -y ninja-build
      - name: Build Externals
        run: ./make_externals.sh -G Ninja
      - name: Build CosmoScout VR
        run: ./make.sh -G Ninja
      - name: Run Tests
        run: ./install/linux-release/bin/run_all_tests.sh
      - name: Calculate Test Coverage
        run: ./lcov.sh
      - name: Upload Coverage Info
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ./build/linux-release/coverage.info

  build_linux_clang:
    name: Linux Build (clang 6.0)
    runs-on: ubuntu-18.04
    if: >
      github.event_name == 'pull_request' ||
      ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
      contains(github.event.head_commit.message, '[run-ci]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Install CMake
        run: sudo pip install cmake
      - name: Download Dependencies
        run: |
          sudo add-apt-repository ppa:mhier/libboost-latest
          sudo apt-get update -q
          sudo apt-get install libc++-dev libgl1-mesa-dev libglu1-mesa-dev libx11-dev
          sudo apt-get install libxi-dev libgconf-2-4 libboost1.70-dev
          sudo apt-get install -y ninja-build
      - name: Build Externals
        env:
          CC: clang
          CXX: clang++
        run: ./make_externals.sh -G Ninja
      - name: Build CosmoScout VR
        env:
          CC: clang
          CXX: clang++
        run: ./make.sh -G Ninja
      - name: Run Tests
        run: ./install/linux-release/bin/run_all_tests.sh

  build_windows:
    name: Windows Build (msvc 19.16.27032.1)
    runs-on: windows-2016
    # if: >
    #   github.event_name == 'pull_request' ||
    #   ( contains(github.ref, 'master') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
    #   ( contains(github.ref, 'develop') && !contains(github.event.head_commit.message, '[no-ci]') ) ||
    #   contains(github.event.head_commit.message, '[run-ci]')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
      - name: Checkout Submodules
        run: git submodule update --init
      - name: Install Ninja
        shell: cmd
        run: |
          choco install ninja
      - name: Build Externals
        shell: cmd
        run: |
          set CL_EXE="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64\cl.exe"
          set CL_CMAKE="C:/Program Files\ (x86)/Microsoft\ Visual\ Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe"
          set CC=%CL_EXE%
          set CXX=%CL_EXE%
          make_externals.bat -G Ninja -DCMAKE_C_COMPILER=%CL_CMAKE% -DCMAKE_CXX_COMPILER=%CL_CMAKE% -DMSVC_TOOLSET_VERSION=141
      - name: Build CosmoScout VR
        shell: cmd
        run: |
          set CL_EXE="C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64\cl.exe"
          set CL_CMAKE="C:/Program Files\ (x86)/Microsoft\ Visual\ Studio/2017/Enterprise/VC/Tools/MSVC/14.16.27023/bin/Hostx64/x64/cl.exe"
          set CC=%CL_EXE%
          set CXX=%CL_EXE%
          make.bat -G Ninja -DCMAKE_C_COMPILER=%CL_CMAKE% -DCMAKE_CXX_COMPILER=%CL_CMAKE% -DMSVC_TOOLSET_VERSION=141
      - name: Run Tests
        shell: cmd
        run: install\\windows-release\\bin\\run_all_tests.bat
